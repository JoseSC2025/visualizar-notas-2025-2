import streamlit as st
import pandas as pd
import datetime
from io import BytesIO
import requests

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Visualizar Notas de F√≠sica General 2025-2", page_icon="üìö")

# URL del archivo Excel (reemplazar con tu enlace real)
#EXCEL_URL = "https://docs.google.com/spreadsheets/d/1TU_ID_DE_ARCHIVO/export?format=xlsx"
EXCEL_URL = "https://docs.google.com/spreadsheets/d/17bSX9rOMlrOMLlXVrUshexavZxt9BcdN/edit?usp=drive_link&ouid=104569301030055065312&rtpof=true&sd=true"

# Funci√≥n para cargar datos
#@st.cache_resource(ttl=600)
#def load_data():
#    response = requests.get(EXCEL_URL)
#    return pd.ExcelFile(BytesIO(response.content))

# Reemplaza la funci√≥n load_data con:
import gspread
from oauth2client.service_account import ServiceAccountCredentials

def load_data():
    scope = ['https://spreadsheets.google.com/feeds',
             'https://www.googleapis.com/auth/drive']
    
    # Crea un archivo credentials.json con las credenciales de Google API
    creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
    client = gspread.authorize(creds)
    
    # Abre por URL
    spreadsheet = client.open_by_url("https://docs.google.com/spreadsheets/d/187LELG4kMazPk7cE5VR8IVmWsAC525Pr9ai4Ouixx6Y/edit?usp=sharing")
    return spreadsheet

# Funci√≥n de autenticaci√≥n
def authenticate(excel_file, grupo, codigo, password):
    try:
        df = pd.read_excel(excel_file, sheet_name=grupo)
        mask = (df['C√≥digo de matr√≠cula'] == codigo) & (df['DNI'] == password)
        if mask.any():
            return df[mask].iloc[0]
        return None
    except:
        return None

# Funci√≥n para formatear tabla
def format_table(student_data):
    actividades = [
        "Examen Parcial",
        "Examen Final",
        "Exposici√≥n Grupal",
        "Cuestionarios",
        "Participaci√≥n (2%) + Asistencia (3%)",
        "Laboratorio",
        "Promedio"
    ]
    
    ponderacion = [
        "30%", "30%", "10%", "5%", "5%", "20%", "100%"
    ]
    
    notas = [
        student_data['ExParcial'],
        student_data['ExFinal'],
        student_data['Exposici√≥n'],
        student_data['Cuestionario'],
        student_data['ParticipaAsiste'],
        student_data['Laboratorio'],
        student_data['Promedio']
    ]
    
    df = pd.DataFrame({
        'Actividades': actividades,
        'Ponderaci√≥n': ponderacion,
        'Notas': notas
    })
    
    # Calcular promedio (por si acaso)
    recalculated = (
        0.30 * student_data['ExParcial'] +
        0.30 * student_data['ExFinal'] +
        0.10 * student_data['Exposici√≥n'] +
        0.05 * student_data['Cuestionario'] +
        0.05 * student_data['ParticipaAsiste'] +
        0.20 * student_data['Laboratorio']
    )
    df.loc[6, 'Notas'] = recalculated
    
    return df

# Interfaz principal
st.title("Visualizar Notas de F√≠sica General 2025-2")

# Inicializar estado de sesi√≥n
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.student_data = None

# Formulario de login si no est√° autenticado
if not st.session_state.logged_in:
    grupos = [f"Grupo_{i:02d}" for i in range(1, 16)]
    grupo = st.selectbox("Selecciona tu grupo:", grupos, index=None)
    codigo = st.text_input("C√≥digo de matr√≠cula:", max_chars=10)
    password = st.text_input("Contrase√±a (DNI):", type="password", max_chars=8)
    
    if st.button("Ingresar"):
        if grupo and codigo and password:
            try:
                excel_file = load_data()
                student_data = authenticate(excel_file, grupo, codigo, password)
                
                if student_data is not None:
                    # Actualizar contador de ingresos (simulado)
                    st.session_state.logged_in = True
                    st.session_state.student_data = student_data
                    st.session_state.grupo = grupo
                    st.rerun()
                else:
                    st.error("‚ö†Ô∏è Credenciales incorrectas. Verifica tus datos.")
            except Exception as e:
                st.error(f"Error al acceder a los datos: {str(e)}")
        else:
            st.warning("Por favor completa todos los campos")

# Mostrar datos si est√° autenticado
else:
    student_data = st.session_state.student_data
    st.success(f"‚úÖ Bienvenido(a): {student_data['Apellidos y Nombre']}")
    
    # Mostrar datos del estudiante
    st.subheader("Tus resultados acad√©micos")
    st.markdown(f"**Grupo:** {st.session_state.grupo}")
    
    # Crear tabla de notas
    df = format_table(student_data)
    
    # Formatear tabla con estilo
    st.dataframe(
        df.style
        .set_properties(**{
            'text-align': 'center',
            'background-color': '#f0f2f6',
            'color': '#333333',
            'border': '1px solid #cccccc'
        })
        .set_table_styles([{
            'selector': 'th',
            'props': [
                ('background-color', '#4a86e8'),
                ('color', 'white'),
                ('font-weight', 'bold'),
                ('text-align', 'center')
            ]
        }])
        .format({"Notas": "{:.2f}"}),
        hide_index=True
    )
    
    # Mensaje motivador
    st.markdown("---")
    st.subheader("üìö Sigamos estudiando...")
    st.markdown("> *El esfuerzo constante es la clave del √©xito acad√©mico. ¬°Sigue as√≠!*")
    
    # Fecha y hora
    now = datetime.datetime.now()
    st.caption(f"√öltima visualizaci√≥n: {now.strftime('%d/%m/%Y %H:%M:%S')}")
    
    # Bot√≥n para salir
    if st.button("Cerrar sesi√≥n"):
        st.session_state.logged_in = False
        st.session_state.student_data = None
        st.rerun()

# Notas importantes en el sidebar
st.sidebar.header("Informaci√≥n importante")
st.sidebar.markdown("""
1. Usa tu DNI como contrase√±a inicial
2. Selecciona tu grupo correctamente
3. Las notas se actualizan peri√≥dicamente
4. Contacta al docente si encuentras errores
""")

st.sidebar.markdown("---")
st.sidebar.caption("Sistema Acad√©mico - F√≠sica General 2025-2")
